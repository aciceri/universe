# Heavily based on https://github.com/mightyiam/files/
{
  config,
  lib,
  getSystem,
  flake-parts-lib,
  self,
  ...
}:
{
  options.perSystem = flake-parts-lib.mkPerSystemOption (
    { config, pkgs, ... }:
    let
      cfg = config.files;
    in
    {
      options = {
        files = {
          gitToplevel = lib.mkOption {
            type = lib.types.path;
            default = self;
            readOnly = true;
          };

          files = lib.mkOption {
            default = [ ];
            type = lib.types.listOf (
              lib.types.submodule {
                options = {
                  path_ = lib.mkOption {
                    type = lib.types.str;
                  };
                  drv = lib.mkOption {
                    type = lib.types.package;
                  };
                };
              }
            );
          };

          writer = {
            exeFilename = lib.mkOption {
              type = lib.types.singleLineStr;
              default = "write-files";
            };
            drv = lib.mkOption {
              type = lib.types.package;
              default = pkgs.writeShellApplication {
                name = cfg.writer.exeFilename;
                runtimeInputs = [ pkgs.git ];
                text =
                  cfg.files
                  |> lib.map (
                    { path_, drv }:
                    ''
                      dir=$(dirname ${path_})
                      mkdir -p "$dir"
                      cat ${drv} > ${lib.escapeShellArg path_}
                    ''
                  )
                  |> lib.concat [
                    ''
                      toplevel="$(git rev-parse --show-toplevel)"
                      cd "$toplevel"
                    ''
                  ]
                  |> lib.concatLines;
              };
              readOnly = true;
            };
          };
        };
      };
    }
  );

  config = {
    perSystem =
      { config, pkgs, ... }:
      let
        cfg = config.files;
        writer = cfg.writer.drv;
      in
      {
        checks =
          cfg.files
          |> lib.map (
            { path_, drv }:
            lib.nameValuePair "files-${path_}" (
              pkgs.runCommand "check-file-${path_}" { nativeBuildInputs = [ pkgs.difftastic ]; } ''
                difft --exit-code --display inline ${drv} ${cfg.gitToplevel + "/${path_}"}
                touch $out
              ''
            )
          )
          |> lib.listToAttrs;

        make-shells.default = {
          shellHook = lib.getExe writer;
          packages = [ writer ];
        };

        pre-commit.settings.hooks.write-files = {
          enable = true;
          stages = [ "pre-commit" ];
          before = [ "treefmt" ];
          always_run = true;
          verbose = true;
          pass_filenames = false;
          entry = lib.getExe writer;
        };
      };

    readme.parts.files =
      (getSystem (lib.head config.systems)).files.files
      |> lib.map (file: "- [${file.path_}](${file.path_})")
      |> lib.naturalSort
      |> lib.concat [
        ''
          ## Autogenerated files

          The following files are automatically generated:
        ''
      ]
      |> lib.concatStringsSep "\n";
  };

}

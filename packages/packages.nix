{
  config,
  lib,
  getSystem,
  getCurrentDir,
  ...
}:
let
  currentDir = getCurrentDir __curPos;
in
{
  perSystem =
    {
      config,
      pkgs,
      inputs',
      lib,
      ...
    }:
    let
      personalPackagePaths =
        builtins.readDir ./.
        |> lib.filterAttrs (_: type: type == "directory")
        |> lib.mapAttrs (name: _: ./. + "/${name}" + "/_package.nix");

      nurPackagesSource = ''
        # Autogenerated
        { pkgs ? import <nixpkgs> { } }: {
      ''
      + (
        personalPackagePaths
        |> lib.concatMapAttrsStringSep "\n" (name: _: "  ${name} = pkgs.callPackage ./${name}/_package.nix { };")
      )
      + "\n}";

      update-packages =
        personalPackagePaths
        |> lib.attrNames
        |> lib.map (name: config.packages.${name})
        |> lib.filter (package: package.passthru ? updateScript)
        |> lib.map (package: lib.concatStringsSep " " package.passthru.updateScript + " --flake ${package.pname}")
        |> lib.concatStringsSep "\n"
        |> pkgs.writeShellScriptBin "update-packages";
    in
    {
      packages = {
        inherit (inputs'.nix-ai-tools.packages) claude-desktop;
        inherit update-packages;
      }
      // (
        personalPackagePaths
        |> lib.mapAttrs (
          _: path:
          (pkgs.callPackage path { }).overrideAttrs (old: {
            passthru = (old.passthru or { }) // {
              nur = true; # mark packages from this packages set
            };
          })
        )
      );

      files.files = [
        {
          path_ = "packages/_nur.nix";
          drv = nurPackagesSource |> pkgs.writeText "_nur.nix";
        }
      ];

      treefmt.settings.global.excludes = [ "packages/_nur.nix" ];
    };

  flake.modules.nixos.base =
    { config, ... }:
    {
      nixpkgs.overlays = [
        (_: _: (getSystem config.nixpkgs.hostPlatform.system).packages)
      ];
    };

  readme.parts.packages =
    (getSystem (lib.head config.systems)).packages
    |> lib.filterAttrs (_: pkg: pkg.passthru.nur or false)
    |> lib.mapAttrsToList (
      name: pkg: ''
        ### [${name}](${currentDir}/${name}/_package.nix) (version ${pkg.version})

        ${pkg.meta.longDescription or pkg.meta.description}
      ''
    )
    |> lib.concat [
      ''
        ## NUR packages

        This repository also acts as a NUR repository. Note that not all packages in the `packages`
        flake output are included in the [_nur.nix file](${currentDir}/_nur.nix).
      ''
    ]
    |> lib.concatLines;
}
